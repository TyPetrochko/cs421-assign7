<i> Summary/Assumptions

For my final project, I implemented RegAlloc.

The included source files comprise the fully-function tiger compiler. This
implementation uses Lee's CodeGen implementation (CG0) and Jack's ItreeGen
implementation (IG2).

My RegAlloc implementation does not require any assumptions to be made from
ItreeGen or CodeGen beyond basic correctness. This includes correctly-set
"dst" and "src" temp-lists in CodeGen, and a valid Itree.

I used Lee's Codegen implementation because in my initial implementation, I
adapted my code to work with Wolf's ItreeGen implementation, which ultimately
had a few bugs that failed testcases like arridx.tig, arrtest.tig, etc. Lee's
CodeGen code, however, works with Jack's implementation - which has since been
fixed for these cases.

I also assumed that 60 pseudoregisters is sufficient to handle all test-cases.

<ii> How to use

To test this implementation, I provided a test.sh and compile.sh script.
Running

 $ ./test.sh file/to/compile.tig

generates a file 'file/to/compile.tig.s', links it with the runtime.c
environment, creates the executable 'a.out', and runs it. To just generate
the assembly '.s' file, you can invoke

$ ./test.sh file/to/compile.tig

