Standard ML of New Jersey v110.80 [built: Tue Jan 17 09:30:42 2017]
[opening test.sml]
[autoloading]
[library $smlnj/cm/cm.cm is stable]
[library $smlnj/internal/cm-sig-lib.cm is stable]
[library $/pgraph.cm is stable]
[library $smlnj/internal/srcpath-lib.cm is stable]
[library $SMLNJ-BASIS/basis.cm is stable]
[library $SMLNJ-BASIS/(basis.cm):basis-common.cm is stable]
[autoloading done]
[scanning sources.cm]
[library $/ml-yacc-lib.cm is stable]
[attempting to load plugin $/lex-ext.cm]
[library $/lex-ext.cm is stable]
[library $smlnj/cm/tools.cm is stable]
[library $smlnj/internal/cm-lib.cm is stable]
[plugin $/lex-ext.cm loaded successfully]
[attempting to load plugin $/mllex-tool.cm]
[library $/mllex-tool.cm is stable]
[plugin $/mllex-tool.cm loaded successfully]
[attempting to load plugin $/grm-ext.cm]
[library $/grm-ext.cm is stable]
[plugin $/grm-ext.cm loaded successfully]
[attempting to load plugin $/mlyacc-tool.cm]
[library $/mlyacc-tool.cm is stable]
[plugin $/mlyacc-tool.cm loaded successfully]
[library $SMLNJ-LIB/Util/smlnj-lib.cm is stable]
[library $SMLNJ-ML-YACC-LIB/ml-yacc-lib.cm is stable]
[loading (sources.cm):FrontEnd/table.sig]
[loading (sources.cm):FrontEnd/table.sml]
[loading (sources.cm):FrontEnd/symbol.sml]
[loading (sources.cm):ItreeGen/temp.sml]
[loading (sources.cm):FrontEnd/errormsg.sml]
[loading (sources.cm):RegAlloc/graph.sig]
[loading (sources.cm):RegAlloc/graph.sml]
[loading (sources.cm):RegAlloc/dotgraph.sml]
[loading (sources.cm):RegAlloc/flowgraph.sml]
[loading (sources.cm):RegAlloc/liveness.sml]
[loading (sources.cm):reg-std.sig]
[loading (sources.cm):CodeGen/register.sml]
[loading (sources.cm):RegAlloc/regalloc.sml]
[loading (sources.cm):ItreeGen/tree.sml]
[loading (sources.cm):CodeGen/assem.sml]
[loading (sources.cm):ItreeGen/frame.sml]
[loading (sources.cm):CodeGen/codegen.sml]
[loading (sources.cm):FrontEnd/absyn.sml]
[loading (sources.cm):ItreeGen/translate.sml]
[loading (sources.cm):ItreeGen/types.sml]
[loading (sources.cm):ItreeGen/env.sml]
[loading (sources.cm):FrontEnd/tiger.grm.sig]
[loading (sources.cm):FrontEnd/tiger.lex.sml]
[loading (sources.cm):FrontEnd/tiger.grm.sml]
[loading (sources.cm):FrontEnd/parse.sml]
[loading (sources.cm):CodeGen/canon.sml]
[loading (sources.cm):ItreeGen/printtree.sml]
[loading (sources.cm):RegAlloc/makegraph.sml]
[loading (sources.cm):ItreeGen/semant.sml]
[loading (sources.cm):main.sml]
[New bindings added.]
val it = true : bool
[autoloading]
[autoloading done]
Emit tigermain
Emit L4
Emit L3
Emit L2
loadit(): mapping pseudo-register `f0' to machine reg. `ecx'
loadit(): mapping pseudo-register `f1' to machine reg. `ecx'
loadit(): mapping pseudo-register `f0' to machine reg. `ecx'
Emit L1
loadit(): mapping pseudo-register `f0' to machine reg. `ecx'
loadit(): mapping pseudo-register `f0' to machine reg. `ecx'
loadit(): mapping pseudo-register `f1' to machine reg. `ecx'
val it = () : unit
[autoloading]
[autoloading done]
test.sml:4.1-4.36 Warning: type vars not generalized because of
   value restriction are instantiated to dummy types (X1,X2,...)

**************************************
*************** OUTPUT ***************
**************************************

.text
	.align 4
.globl tigermain
	.type	tigermain,@function

tigermain:
	pushl %ebp
	movl %esp,%ebp
	subl $260, %esp 	# make frame space
	movl %ebx, -244(%ebp) 	# saving ebx
	movl %esi, -248(%ebp) 	# saving esi
	movl %edi, -252(%ebp) 	# saving edi
L25:
	movl %ebp, %ebx	
	movl %ebx, %edi	
	movl %ebp, %ebx	
	movl %ebx, %esi	
	movl %ebp, %ebx	
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call L1
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, 4(%esp)	
	movl %esi, %ebx	
	movl %ebx, -0(%esp)	
	call L3
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, 4(%esp)	
	movl %edi, %ebx	
	movl %ebx, -0(%esp)	
	call L4
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, %eax	
	jmp L24	
L24:
	movl -244(%ebp), %ebx 	# restoring ebx
	movl -248(%ebp), %esi 	# restoring esi
	movl -252(%ebp), %edi 	# restoring edi
	movl %ebp,%esp
	popl %ebp
	ret

.text
	.align 4
.globl L4
	.type	L4,@function

L4:
	pushl %ebp
	movl %esp,%ebp
	subl $260, %esp 	# make frame space
	movl %ebx, -244(%ebp) 	# saving ebx
	movl %esi, -248(%ebp) 	# saving esi
	movl %edi, -252(%ebp) 	# saving edi
L27:
	movl $-0, %ebx	
	movl %ebp, %esi	
	movl 12(%esi), %esi	
	cmpl %ebx, %esi
	je L21
	jmp L22
L22:
	movl $L19, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call ord
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, %ebx
	movl %ebp, %esi	
	movl 12(%esi), %esi	
	movl -0(%esi), %esi	
	addl %esi, %ebx
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call chr
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call print
	movl %eax, %ebx
	movl $L20, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call print
	movl %eax, %ebx
	movl %ebp, %ebx	
	movl 8(%ebx), %ebx	
	movl %ebx, %ebx	
	movl %ebp, %esi	
	movl 12(%esi), %esi	
	movl 4(%esi), %esi	
	movl %esi, %esi	
	movl %esi, %esi	
	movl %esi, 4(%esp)	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call L4
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, %ebx	
L23:
	movl %ebx, %ebx	
	movl %ebx, %eax	
	jmp L26	
L21:
	movl $L18, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call print
	movl %eax, %ebx
	movl %ebx, %ebx	
	jmp L23	
L26:
	movl -244(%ebp), %ebx 	# restoring ebx
	movl -248(%ebp), %esi 	# restoring esi
	movl -252(%ebp), %edi 	# restoring edi
	movl %ebp,%esp
	popl %ebp
	ret

.text
	.align 4
.globl L3
	.type	L3,@function

L3:
	pushl %ebp
	movl %esp,%ebp
	subl $268, %esp 	# make frame space
	movl %ebx, -248(%ebp) 	# saving ebx
	movl %esi, -252(%ebp) 	# saving esi
	movl %edi, -256(%ebp) 	# saving edi
L29:
	movl $-0, %ebx	
	movl %ebp, %esi	
	movl 12(%esi), %esi	
	cmpl %ebx, %esi
	je L14
	jmp L15
L15:
	movl %ebp, %ebx	
	movl %ebx, %ebx
	movl $-244, %esi	
	addl %esi, %ebx
	movl %ebx, %edi	
	movl %ebp, %ebx	
	movl 8(%ebx), %ebx	
	movl %ebx, %ebx	
	movl %ebp, %esi	
	movl 12(%esi), %esi	
	movl 4(%esi), %esi	
	movl %esi, %esi	
	movl %esi, %esi	
	movl %esi, 4(%esp)	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call L3
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %edi, %esi	
	movl %ebx, (%esi)	
	movl %ebp, %ebx	
	movl 8(%ebx), %ebx	
	movl %ebx, %ebx	
	movl %ebp, %esi	
	movl 12(%esi), %esi	
	movl -0(%esi), %esi	
	movl %esi, %esi	
	movl %ebp, %edi	
	movl -244(%edi), %edi	
	movl %edi, %edi	
	movl %edi, %edi	
	movl %edi, 8(%esp)	
	movl %esi, %esi	
	movl %esi, 4(%esp)	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call L2
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, %ebx	
L16:
	movl %ebx, %ebx	
	movl %ebx, %eax	
	jmp L28	
L14:
	movl $-0, %ebx	
	movl %ebx, %ebx	
	jmp L16	
L28:
	movl -248(%ebp), %ebx 	# restoring ebx
	movl -252(%ebp), %esi 	# restoring esi
	movl -256(%ebp), %edi 	# restoring edi
	movl %ebp,%esp
	popl %ebp
	ret

.text
	.align 4
.globl L2
	.type	L2,@function

L2:
	pushl %ebp
	movl %esp,%ebp
	subl $264, %esp 	# make frame space
	movl %ebx, -244(%ebp) 	# saving ebx
	movl %esi, -248(%ebp) 	# saving esi
	movl %edi, -252(%ebp) 	# saving edi
L31:
	movl $-0, %ebx	
	movl %ebp, %esi	
	movl 16(%esi), %esi	
	cmpl %ebx, %esi
	je L10
	jmp L11
L11:
	movl %ebp, %ebx	
	movl 16(%ebx), %ebx	
	movl -0(%ebx), %ebx	
	movl %ebp, %esi	
	movl 12(%esi), %esi	
	cmpl %ebx, %esi
	jle L7
	jmp L8
L8:
	movl $8, %ebx	
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call allocRecord
	movl %eax, %ebx
	movl %ebx, %ecx	
	movl	%ecx, -4(%ebp) # save pseudo-register
	movl %ebp, %ebx	
	movl 16(%ebx), %ebx	
	movl -0(%ebx), %ebx	
	movl %ebx, -0(%ecx)	
	movl	%ecx, -4(%ebp) # save pseudo-register
	movl	-4(%ebp), %ecx # load pseudo-register
	movl %ecx, %ebx	
	movl %ebx, %ebx
	movl $4, %esi	
	addl %esi, %ebx
	movl %ebx, %ecx	
	movl	%ecx, -8(%ebp) # save pseudo-register
	movl %ebp, %ebx	
	movl 8(%ebx), %ebx	
	movl %ebx, %ebx	
	movl %ebp, %esi	
	movl 12(%esi), %esi	
	movl %esi, %esi	
	movl %ebp, %edi	
	movl 16(%edi), %edi	
	movl 4(%edi), %edi	
	movl %edi, %edi	
	movl %edi, %edi	
	movl %edi, 8(%esp)	
	movl %esi, %esi	
	movl %esi, 4(%esp)	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call L2
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl	-8(%ebp), %ecx # load pseudo-register
	movl %ecx, %esi	
	movl %ebx, (%esi)	
	movl	-4(%ebp), %ecx # load pseudo-register
	movl %ecx, %ebx	
	movl %ebx, %ebx	
L9:
	movl %ebx, %ebx	
	movl %ebx, %ebx	
L12:
	movl %ebx, %ebx	
	movl %ebx, %eax	
	jmp L30	
L10:
	movl $8, %ebx	
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call allocRecord
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl %ebp, %ebx	
	movl 12(%ebx), %ebx	
	movl %ebx, -0(%ebx)	
	movl %ebp, %ebx	
	movl 16(%ebx), %ebx	
	movl %ebx, 4(%ebx)	
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	jmp L12	
L7:
	movl $8, %ebx	
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call allocRecord
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl %ebp, %ebx	
	movl 12(%ebx), %ebx	
	movl %ebx, -0(%ebx)	
	movl %ebp, %ebx	
	movl 16(%ebx), %ebx	
	movl %ebx, 4(%ebx)	
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	jmp L9	
L30:
	movl -244(%ebp), %ebx 	# restoring ebx
	movl -248(%ebp), %esi 	# restoring esi
	movl -252(%ebp), %edi 	# restoring edi
	movl %ebp,%esp
	popl %ebp
	ret

.text
	.align 4
.globl L1
	.type	L1,@function

L1:
	pushl %ebp
	movl %esp,%ebp
	subl $256, %esp 	# make frame space
	movl %ebx, -244(%ebp) 	# saving ebx
	movl %esi, -248(%ebp) 	# saving esi
	movl %edi, -252(%ebp) 	# saving edi
L33:
	movl $8, %ebx	
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call allocRecord
	movl %eax, %ebx
	movl %ebx, %edi	
	movl $4, -0(%edi)	
	movl %edi, %ebx	
	movl %ebx, %ebx
	movl $4, %esi	
	addl %esi, %ebx
	movl %ebx, %ecx	
	movl	%ecx, -8(%ebp) # save pseudo-register
	movl $8, %ebx	
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call allocRecord
	movl %eax, %ebx
	movl %ebx, %esi	
	movl $3, -0(%esi)	
	movl %esi, %ebx	
	movl %ebx, %ebx
	movl $4, %ecx	
	movl	%ecx, -4(%ebp) # save pseudo-register
	movl	-4(%ebp), %ecx # load pseudo-register
	addl %ecx, %ebx
	movl %ebx, %ecx	
	movl	%ecx, -4(%ebp) # save pseudo-register
	movl $8, %ebx	
	movl %ebx, %ebx	
	movl %ebx, %ebx	
	movl %ebx, -0(%esp)	
	call allocRecord
	movl %eax, %ebx
	movl %ebx, %ebx	
	movl $9, -0(%ebx)	
	movl $-0, 4(%ebx)	
	movl %ebx, %ebx	
	movl	-4(%ebp), %ecx # load pseudo-register
	movl %ecx, %ecx	
	movl	%ecx, -4(%ebp) # save pseudo-register
	movl %ebx, (%ecx)	
	movl	%ecx, -4(%ebp) # save pseudo-register
	movl %esi, %ebx	
	movl	-8(%ebp), %ecx # load pseudo-register
	movl %ecx, %esi	
	movl %ebx, (%esi)	
	movl %edi, %ebx	
	movl %ebx, %eax	
	jmp L32	
L32:
	movl -244(%ebp), %ebx 	# restoring ebx
	movl -248(%ebp), %esi 	# restoring esi
	movl -252(%ebp), %edi 	# restoring edi
	movl %ebp,%esp
	popl %ebp
	ret

L20:
	.long 1
	.string " "
L19:
	.long 1
	.string "0"
L18:
	.long 1
	.string "\n"
